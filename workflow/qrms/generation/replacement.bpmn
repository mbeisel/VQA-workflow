<?xml version="1.0" encoding="UTF-8"?>
<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:camunda="http://camunda.org/schema/1.0/bpmn" id="Definitions_0b7il2s" targetNamespace="http://bpmn.io/schema/bpmn" exporter="QuantME Modeler" exporterVersion="4.5.0-nightly.20220628">
  <bpmn:process id="Process_03tgi13" isExecutable="true">
    <bpmn:serviceTask id="ServiceTask_1d6l6i9" name="Generate Circuits">
      <bpmn:extensionElements>
        <camunda:connector>
          <camunda:inputOutput>
            <camunda:inputParameter name="method">POST</camunda:inputParameter>
            <camunda:inputParameter name="headers">
              <camunda:map>
                <camunda:entry key="Accept">application/json</camunda:entry>
                <camunda:entry key="Content-Type">application/json</camunda:entry>
              </camunda:map>
            </camunda:inputParameter>
            <camunda:inputParameter name="url">http://circuit-generation-service:5000/algorithms/tspqaoa</camunda:inputParameter>
            <camunda:inputParameter name="payload">
              <camunda:script scriptFormat="JavaScript">
                var matrix = execution.getVariable("adjMatrix");
                var p = execution.getVariable("p");
                var betas = execution.getVariable("betas");
                var gammas = execution.getVariable("gammas");
                
                matrix = matrix.substring(1,matrix.length-1).replace(" ", "");
                matrix = matrix.split("],[");
								new_matrix = []
                for each (var arr in matrix) {
                  new_arr = []
                  arr = arr.replace("[","").replace("]","")
                  numbers = arr.split(",")
                  for each (var num in numbers){
                    new_arr.push(parseFloat(num))
                  }
                  new_matrix.push(new_arr)
                }

                betas = betas.substring(1, betas.length-1)
                betas = betas.split(",")
                b_array = [];
                for each (var el in betas) b_array.push(parseFloat(el));
                betas = b_array 

                gammas = gammas.substring(1, gammas.length-1)
                gammas = gammas.split(",")
                g_array = [];
                for each (var el in gammas) g_array.push(parseFloat(el));
                gammas = g_array 
                
								p = parseInt(p);

                
                
                
                
                
                var myJson = {"adjMatrix": new_matrix,"p": p, "betas": betas, "gammas":gammas};

myJson = JSON.stringify(myJson);
myJson =myJson</camunda:script>
            </camunda:inputParameter>
            <camunda:outputParameter name="circuit">
              <camunda:script scriptFormat="JavaScript">
var resp = connector.getVariable("response");
print('resp'+ resp);
               
var result = S(resp);
print('result ' + result );
qasm = result.elements().prop("circuit");
qasm;</camunda:script>
            </camunda:outputParameter>
          </camunda:inputOutput>
          <camunda:connectorId>http-connector</camunda:connectorId>
        </camunda:connector>
      </bpmn:extensionElements>
    </bpmn:serviceTask>
  </bpmn:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Process_03tgi13">
      <bpmndi:BPMNShape id="ServiceTask_1d6l6i7_di" bpmnElement="ServiceTask_1d6l6i9">
        <dc:Bounds x="160" y="80" width="100" height="80" />
      </bpmndi:BPMNShape>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</bpmn:definitions>